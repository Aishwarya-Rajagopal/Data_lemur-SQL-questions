"""
Domain   : SQL
Author    : Aishwarya Rajagopal
Level     : Medium
"""
Problem 1: https://datalemur.com/questions/sql-highest-grossing
with cte as(
SELECT category,product,sum(spend) as total_spend ,
rank() over(PARTITION by category order BY sum(spend) DESC ) as ranking
FROM product_spend
where EXTRACT(YEAR FROM transaction_date) = 2022
group by category,product
)
select category,product,total_spend
from cte
where ranking <3
order by category,ranking
;

Problem 2 :https://datalemur.com/questions/sql-second-highest-salary

soln 1 : 
SELECT salary
FROM employee
order by salary desc
limit 1 OFFSET 1;

soln 2:
SELECT max(salary)
FROM employee
where salary < (SELECT max(salary)
FROM employee);

Problem 3: https://datalemur.com/questions/sql-top-three-salaries

with cte1 as(
SELECT department_name,	name,	salary ,
dense_rank() over (partition by department_name order by salary desc) as ranking
FROM employee e
left join department d
on e.department_id = d.department_id)

select department_name,	name,	salary
from cte1
where ranking <= 3
order by department_name asc,salary desc,	name asc	;

Problem 4: https://datalemur.com/questions/signup-confirmation-rate

SELECT round(count(t.email_id)::DECIMAL/count(e.email_id),2) as confirm_rate
FROM emails e
left join texts t
on e.email_id = t.email_id and signup_action='Confirmed';


Problem 5: https://datalemur.com/questions/rolling-average-tweets

SELECT user_id,	tweet_date,	
round(avg(tweet_count) over(partition by user_id order by tweet_date
rows between 2 preceding and current row),2) as rolling_avg_3d
FROM tweets;

Problem 6: https://datalemur.com/questions/sql-third-transaction

with cte as (SELECT user_id,	spend	,transaction_date ,
row_number() over (partition by user_id order by transaction_date) as trip_no
FROM transactions)
select user_id,	spend	,transaction_date
from cte
where trip_no = 3;

Problem 7: https://datalemur.com/questions/supercloud-customer

soln 1:
with cte as (SELECT *,
dense_rank() over(PARTITION by customer_id order by product_category) as clubbing
FROM customer_contracts cc
left join products p
on cc.product_id = p.product_id)
SELECT customer_id from cte 
where clubbing = 3;

soln 2:
WITH cte AS (SELECT 
    customers.customer_id, 
    COUNT(DISTINCT products.product_category) AS product_count
  FROM customer_contracts AS customers
  INNER JOIN products 
    ON customers.product_id = products.product_id
  GROUP BY customers.customer_id)
  SELECT customer_id
FROM cte
WHERE product_count = 3;

Problem 8: https://datalemur.com/questions/sql-swapped-food-delivery

WITH cte AS (
  SELECT COUNT(order_id) AS total_orders 
  FROM orders
)

SELECT 
case 
  when order_id % 2 != 0 and order_id != total_orders then order_id + 1
  when order_id % 2 != 0 and order_id = total_orders then order_id
  else order_id - 1
end as corrected_order_id,
item
FROM orders
CROSS JOIN cte
order by corrected_order_id;


Problem 9: https://datalemur.com/questions/sql-bloomberg-stock-min-max-1

with high_open AS
(SELECT ticker,TO_CHAR(date, 'Mon-YYYY') as month,max(open) as highest_open,
ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY open DESC) AS row_num
FROM stock_prices
group by ticker,month,open),

low_open AS
(SELECT ticker,TO_CHAR(date, 'Mon-YYYY') as month,min(open) as lowest_open,
ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY open) AS row_num
FROM stock_prices
group by ticker,month,open)

select high_open.ticker,high_open.month as highest_mth,	highest_open,	
low_open.month as lowest_mth,	lowest_open
from high_open
inner join low_open
on high_open.ticker = low_open.ticker
and high_open.row_num = 1
and low_open.row_num = 1
order by high_open.ticker;


Problem 10: https://datalemur.com/questions/card-launch-success

with cte as 
(SELECT card_name,MAKE_DATE(issue_year, issue_month, 1) as issue_date,issued_amount ,

min(MAKE_DATE(issue_year, issue_month, 1)) over(partition by card_name) as launch_date
FROM monthly_cards_issued)
SELECT card_name, issued_amount
from cte
where issue_date = launch_date
order by issued_amount desc;


Problem 11: https://datalemur.com/questions/amazon-shopping-spree

soln 1:
with cte as
(select user_id,transaction_date,
lead(transaction_date,1) over(partition by user_id order by transaction_date) as second_day,
lead(transaction_date,2) over(partition by user_id order by transaction_date) as third_day
from transactions)

select DISTINCT user_id
from cte
where second_day = transaction_date + INTERVAL '1 day' AND 
third_day = transaction_date + INTERVAL '2 days' 

soln 2: 
select distinct t1.user_id,t1.transaction_date
from transactions as t1
inner join transactions as t2
on date(t2.transaction_date) = date(t1.transaction_date)+1
inner join transactions t3
on date(t3.transaction_date) = date(t1.transaction_date)+2;


Problem 12:
